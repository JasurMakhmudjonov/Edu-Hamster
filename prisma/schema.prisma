generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum TaskStatus {
  PENDING
  FAILED
  ACCEPTED
}

model Users {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname      String
  email         String          @unique
  username      String          @unique
  profileImage  String?
  password      String
  isAdmin       Boolean         @default(false)
  totalCoins    Int             @default(0)
  referralCode  String          @unique
  points        Int             @default(0)
  level         Int             @default(1)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  userTasks     UserTasks[]
  notifications Notifications[]
  purchases     Purchases[]

  @@index([email])
  @@index([username])
  @@index([referralCode])
  @@index([deletedAt])
  @@map("users")
}

model TopicCategories {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topics[]

  @@index([name])
  @@map("topic_categories")
}

model Topics {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String           @unique
  description String
  categoryId  String           @db.Uuid
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    TopicCategories  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quizzes     QuizTasks[]
  readings    ReadingTasks[]
  videos      VideoTasks[]
  trueFalse   TrueFalseTasks[]
  userTasks   UserTasks[]

  @@index([title])
  @@index([categoryId])
  @@index([createdAt])
}

model QuizTasks {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String?
  rewardCoins    Int
  questions      Json[]
  correctAnswers Int[]
  timeLimit      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  topicId        String   @db.Uuid
  topic          Topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("quiz_tasks")
}

model ReadingTasks {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  content     String
  timeLimit   Int
  rewardCoins Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topicId     String   @db.Uuid
  topic       Topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("reading_tasks")
}

model VideoTasks {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  description   String?
  videoUrl      String
  videoDuration Int
  rewardCoins   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  topicId       String   @db.Uuid
  topic         Topics   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("video_tasks")
}

model TrueFalseTasks {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String?
  questions      Json[]
  correctAnswers Boolean[]
  rewardCoins    Int
  timeLimit      Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  topicId        String    @db.Uuid
  topic          Topics    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("true_false_tasks")
}

model SpinRewards {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rewardCoins Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([rewardCoins])
  @@index([createdAt])
  @@map("spin_rewards")
}

model ExchangeItemCategories {
  id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  items     ExchangeItems[]

  @@index([name])
  @@map("exchange_item_categories")
}

model ExchangeItems {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coinPrice   Int
  title       String
  description String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  categoryId  String                 @db.Uuid
  category    ExchangeItemCategories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchases   Purchases[]

  @@index([coinPrice])
  @@index([title])
  @@index([categoryId])
  @@index([createdAt])
  @@map("exchange_items")
}

model Purchases {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String        @db.Uuid
  user      Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String        @db.Uuid
  item      ExchangeItems @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([itemId])
  @@index([createdAt])
  @@map("purchases")
}

model Notifications {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isChecked])
  @@index([createdAt])
  @@map("notifications")
}

model UserTasks {
  id                 String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String      @db.Uuid
  user               Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId            String      @db.Uuid
  topic              Topics      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  quizStatus         TaskStatus?
  quizStartTime      DateTime?
  readingStatus      TaskStatus?
  readingStartTime   DateTime?
  trueFalseStatus    TaskStatus?
  trueFalseStartTime DateTime?
  videoStatus        TaskStatus?
  videoStartTime     DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([userId])
  @@index([topicId])
  @@index([createdAt])
  @@index([quizStatus, quizStartTime])
  @@index([readingStatus, readingStartTime])
  @@index([trueFalseStatus, trueFalseStartTime])
  @@index([videoStatus, videoStartTime])
  @@index([userId, topicId])
  @@map("user_tasks")
}
