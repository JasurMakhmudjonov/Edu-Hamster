generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  FAILED
  ACCEPTED
}

model Users {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname           String
  email              String               @unique
  username           String               @unique
  profileImage       String?
  password           String
  isAdmin            Boolean              @default(false)
  totalCoins         Int                  @default(0)
  referralCode       String               @unique
  points             Int                  @default(0)
  level              Int                  @default(1)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  userReadingTasks   UserReadingTasks[]
  userQuizTasks      UserQuizTasks[]
  userTrueFalseTasks UserTrueFalseTasks[]
  userVideoTasks     UserVideoTasks[]
  notifications      Notifications[]
  purchases          Purchases[]

  @@index([email])
  @@index([username])
  @@index([referralCode])
  @@index([deletedAt])
  @@map("users")
}

model TopicCategories {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topics[]

  @@index([name])
  @@map("topic_categories")
}

model Topics {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String           @unique
  description String
  categoryId  String           @db.Uuid
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    TopicCategories  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  quizzes     QuizTasks[]
  readings    ReadingTasks[]
  videos      VideoTasks[]
  trueFalse   TrueFalseTasks[]

  @@index([title])
  @@index([categoryId])
  @@index([createdAt])
}

model ReadingTasks {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  description      String?
  content          String
  timeLimit        Int
  rewardCoins      Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  topicId          String             @db.Uuid
  topic            Topics             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userReadingTasks UserReadingTasks[]

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("reading_tasks")
}

model QuizTasks {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String?
  rewardCoins    Int
  questions      Json[]
  correctAnswers Int[]
  timeLimit      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  topicId        String          @db.Uuid
  topic          Topics          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userQuizTasks  UserQuizTasks[]

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("quiz_tasks")
}

model VideoTasks {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String
  description    String?
  videoUrl       String
  videoDuration  Int
  rewardCoins    Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  topicId        String           @db.Uuid
  topic          Topics           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userVideoTasks UserVideoTasks[]

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("video_tasks")
}

model TrueFalseTasks {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  description        String?
  questions          Json[]
  correctAnswers     Boolean[]
  rewardCoins        Int
  timeLimit          Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  topicId            String               @db.Uuid
  topic              Topics               @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userTrueFalseTasks UserTrueFalseTasks[]

  @@index([title])
  @@index([rewardCoins])
  @@index([topicId])
  @@index([createdAt])
  @@map("true_false_tasks")
}

model UserReadingTasks {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String       @db.Uuid
  user             Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingTaskId    String       @db.Uuid
  readingTask      ReadingTasks @relation(fields: [readingTaskId], references: [id], onDelete: Cascade)
  readingStatus    TaskStatus?
  readingStartTime DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([userId])
  @@index([readingTaskId])
  @@map("user_reading_tasks")
}

model UserQuizTasks {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @db.Uuid
  user          Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizTaskId    String      @db.Uuid
  quizTask      QuizTasks   @relation(fields: [quizTaskId], references: [id], onDelete: Cascade)
  quizStatus    TaskStatus?
  quizStartTime DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([quizTaskId])
  @@map("user_quiz_tasks")
}

model UserTrueFalseTasks {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String         @db.Uuid
  user               Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trueFalseTaskId    String         @db.Uuid
  trueFalseTask      TrueFalseTasks @relation(fields: [trueFalseTaskId], references: [id], onDelete: Cascade)
  trueFalseStatus    TaskStatus?
  trueFalseStartTime DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([userId])
  @@index([trueFalseTaskId])
  @@map("user_true_false_tasks")
}

model UserVideoTasks {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String      @db.Uuid
  user           Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoTaskId    String      @db.Uuid
  videoTask      VideoTasks  @relation(fields: [videoTaskId], references: [id], onDelete: Cascade)
  videoStatus    TaskStatus?
  videoStartTime DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([userId])
  @@index([videoTaskId])
  @@map("user_video_tasks")
}

model SpinRewards {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rewardCoins Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@index([rewardCoins])
  @@index([createdAt])
  @@map("spin_rewards")
}

model ExchangeItemCategories {
  id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  items     ExchangeItems[]

  @@index([name])
  @@map("exchange_item_categories")
}

model ExchangeItems {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coinPrice   Int
  title       String                 @unique
  description String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @default(now())
  categoryId  String                 @db.Uuid
  category    ExchangeItemCategories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  purchases   Purchases[]

  @@index([coinPrice])
  @@index([title])
  @@index([categoryId])
  @@index([createdAt])
  @@map("exchange_items")
}

model Purchases {
  id        String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String        @db.Uuid
  user      Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String        @db.Uuid
  item      ExchangeItems @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([itemId])
  @@index([createdAt])
  @@map("purchases")
}

model Notifications {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   String
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isChecked])
  @@index([createdAt])
  @@map("notifications")
}
